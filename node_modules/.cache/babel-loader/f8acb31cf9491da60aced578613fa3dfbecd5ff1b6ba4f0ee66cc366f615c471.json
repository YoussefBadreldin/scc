{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-812839f2\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"pdf-container\",\n  ref: \"scrollContainer\"\n};\nconst _hoisted_2 = {\n  ref: \"pdfViewer\",\n  class: \"pdf-viewer\"\n};\nconst _hoisted_3 = {\n  key: 0,\n  class: \"error-message\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, null, 512 /* NEED_PATCH */), $setup.error ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, \"Unable to load the PDF. Please check the file path or the PDF itself.\")) : _createCommentVNode(\"v-if\", true)], 512 /* NEED_PATCH */);\n}","map":{"version":3,"names":["class","ref","key","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","$setup","error","_hoisted_3","_createCommentVNode"],"sources":["C:\\Users\\Youssef Badreldin\\Documents\\GitHub\\AIUSU\\src\\views\\activities.vue"],"sourcesContent":["<template>\r\n  <div class=\"pdf-container\" ref=\"scrollContainer\">\r\n    <div ref=\"pdfViewer\" class=\"pdf-viewer\"></div>\r\n    <div v-if=\"error\" class=\"error-message\">Unable to load the PDF. Please check the file path or the PDF itself.</div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, onMounted, onBeforeUnmount } from 'vue';\r\n\r\nexport default {\r\n  name: 'PortfolioView',\r\n  setup() {\r\n    const pdfViewer = ref(null);\r\n    const scrollContainer = ref(null);\r\n    const error = ref(false);\r\n    const pdfUrl = '/images/rules.pdf'; // Path to your PDF file\r\n    let pdf = null;\r\n    let renderedPages = new Set();\r\n    let observer = null;\r\n\r\n    onMounted(() => {\r\n      if (!pdfViewer.value) return;\r\n\r\n      // Load PDF.js from CDN\r\n      const script = document.createElement('script');\r\n      script.src = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.4.120/pdf.min.js';\r\n      script.onload = () => {\r\n        const pdfjsLib = window.pdfjsLib;\r\n        pdfjsLib.GlobalWorkerOptions.workerSrc = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.4.120/pdf.worker.min.js';\r\n\r\n        const loadingTask = pdfjsLib.getDocument(pdfUrl);\r\n        loadingTask.promise.then(\r\n          loadedPdf => {\r\n            pdf = loadedPdf;\r\n            initializeObserver(); // Initialize lazy loading\r\n          },\r\n          reason => {\r\n            console.error(reason);\r\n            error.value = true;\r\n          }\r\n        );\r\n      };\r\n      document.head.appendChild(script);\r\n    });\r\n\r\n    const renderPage = (pageNumber) => {\r\n      if (!pdf || renderedPages.has(pageNumber)) return;\r\n\r\n      pdf.getPage(pageNumber).then(page => {\r\n        const viewport = page.getViewport({ scale: 1.5 }); // Adjust scale as needed\r\n        const canvas = document.createElement('canvas');\r\n        const context = canvas.getContext('2d');\r\n        const devicePixelRatio = window.devicePixelRatio || 1;\r\n\r\n        // Set canvas dimensions for high quality\r\n        canvas.width = viewport.width * devicePixelRatio;\r\n        canvas.height = viewport.height * devicePixelRatio;\r\n        context.scale(devicePixelRatio, devicePixelRatio);\r\n\r\n        // Append canvas to viewer\r\n        pdfViewer.value.appendChild(canvas);\r\n\r\n        const renderContext = {\r\n          canvasContext: context,\r\n          viewport: viewport,\r\n        };\r\n\r\n        page.render(renderContext).promise.then(() => {\r\n          console.log(`Page ${pageNumber} rendered`);\r\n          renderedPages.add(pageNumber); // Mark page as rendered\r\n        }).catch(renderError => {\r\n          console.error(`Error rendering page ${pageNumber}:`, renderError);\r\n          error.value = true;\r\n        });\r\n      }).catch(pageError => {\r\n        console.error(`Error fetching page ${pageNumber}:`, pageError);\r\n        error.value = true;\r\n      });\r\n    };\r\n\r\n    const initializeObserver = () => {\r\n      observer = new IntersectionObserver(handleIntersection, {\r\n        root: scrollContainer.value,\r\n        rootMargin: '0px',\r\n        threshold: 0.1, // Adjust this threshold to balance performance\r\n      });\r\n\r\n      // Add observer to each page placeholder (initially invisible)\r\n      for (let i = 1; i <= pdf.numPages; i++) {\r\n        const pagePlaceholder = document.createElement('div');\r\n        pagePlaceholder.setAttribute('data-page-number', i);\r\n        pagePlaceholder.style.height = '800px'; // Adjust based on page height\r\n        pagePlaceholder.style.width = '100%';\r\n        pdfViewer.value.appendChild(pagePlaceholder);\r\n        observer.observe(pagePlaceholder); // Observe each placeholder\r\n      }\r\n    };\r\n\r\n    const handleIntersection = (entries) => {\r\n      entries.forEach(entry => {\r\n        if (entry.isIntersecting) {\r\n          const pageNumber = parseInt(entry.target.getAttribute('data-page-number'));\r\n          renderPage(pageNumber); // Render page when it is in view\r\n          observer.unobserve(entry.target); // Stop observing once the page is rendered\r\n          entry.target.remove(); // Remove placeholder after rendering\r\n        }\r\n      });\r\n    };\r\n\r\n    onBeforeUnmount(() => {\r\n      if (observer) {\r\n        observer.disconnect(); // Clean up observer when the component is destroyed\r\n      }\r\n    });\r\n\r\n    return {\r\n      pdfViewer,\r\n      scrollContainer,\r\n      error\r\n    };\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.pdf-container {\r\n  height: 100vh; /* Full height to take up the screen */\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: flex-start; /* Align to start to allow scrolling */\r\n  position: relative;\r\n  overflow: auto; /* Allow scrolling if content exceeds viewport */\r\n}\r\n\r\n.pdf-viewer {\r\n  display: flex;\r\n  flex-direction: column; /* Stack pages vertically */\r\n  width: 100%;\r\n}\r\n\r\n.error-message {\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n  color: red;\r\n  text-align: center;\r\n  padding: 10px;\r\n  background: rgba(255, 255, 255, 0.8); /* Slight background to improve readability */\r\n  border-radius: 5px; /* Optional: add rounded corners for better look */\r\n}\r\n</style>\r\n"],"mappings":";;;EACOA,KAAK,EAAC,eAAe;EAACC,GAAG,EAAC;;;EACxBA,GAAG,EAAC,WAAW;EAACD,KAAK,EAAC;;;EAF/BE,GAAA;EAGsBF,KAAK,EAAC;;;uBAF1BG,mBAAA,CAGM,OAHNC,UAGM,GAFJC,mBAAA,CAA8C,OAA9CC,UAA8C,+BACnCC,MAAA,CAAAC,KAAK,I,cAAhBL,mBAAA,CAAmH,OAAnHM,UAAmH,EAA3E,uEAAqE,KAHjHC,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}